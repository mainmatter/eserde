error: expected serde deserialize_with attribute to be a string: `deserialize_with = "..."`
 --> tests/compile_fail/malformed_serde_deserialize_with.rs:5:45
  |
5 |     #[serde(alias = "0", deserialize_with = u64_to_u8())]
  |                                             ^^^^^^^^^^^

error: expected serde deserialize_with attribute to be a string: `deserialize_with = "..."`
 --> tests/compile_fail/malformed_serde_deserialize_with.rs:7:45
  |
7 |     #[serde(alias = "1", deserialize_with = false)]
  |                                             ^^^^^

error[E0277]: the trait bound `TryFromIntError: Deserialize<'_>` is not satisfied
 --> tests/compile_fail/malformed_serde_deserialize_with.rs:5:5
  |
5 |     #[serde(alias = "0", deserialize_with = u64_to_u8())]
  |     ^ the trait `Deserialize<'_>` is not implemented for `TryFromIntError`
  |
  = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `TryFromIntError` type
  = note: for types from other crates check whether the crate offers a `serde` feature flag
  = help: the following other types implement trait `Deserialize<'de>`:
            &'a [u8]
            &'a std::path::Path
            &'a str
            ()
            (T,)
            (T0, T1)
            (T0, T1, T2)
            (T0, T1, T2, T3)
          and $N others
  = note: required for `Result<u8, TryFromIntError>` to implement `Deserialize<'_>`
  = note: required for `Result<u8, TryFromIntError>` to implement `EDeserialize<'_>`
note: required by a bound in `maybe_invalid_or_missing`
 --> src/_macro_impl.rs
  |
  | pub fn maybe_invalid_or_missing<'de, D, T>(
  |        ------------------------ required by a bound in this function
...
  |     T: EDeserialize<'de>,
  |        ^^^^^^^^^^^^^^^^^ required by this bound in `maybe_invalid_or_missing`

error[E0277]: the trait bound `TryFromIntError: Deserialize<'_>` is not satisfied
 --> tests/compile_fail/malformed_serde_deserialize_with.rs:7:5
  |
7 |     #[serde(alias = "1", deserialize_with = false)]
  |     ^ the trait `Deserialize<'_>` is not implemented for `TryFromIntError`
  |
  = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `TryFromIntError` type
  = note: for types from other crates check whether the crate offers a `serde` feature flag
  = help: the following other types implement trait `Deserialize<'de>`:
            &'a [u8]
            &'a std::path::Path
            &'a str
            ()
            (T,)
            (T0, T1)
            (T0, T1, T2)
            (T0, T1, T2, T3)
          and $N others
  = note: required for `Result<u8, TryFromIntError>` to implement `Deserialize<'_>`
  = note: required for `Result<u8, TryFromIntError>` to implement `EDeserialize<'_>`
note: required by a bound in `maybe_invalid_or_missing`
 --> src/_macro_impl.rs
  |
  | pub fn maybe_invalid_or_missing<'de, D, T>(
  |        ------------------------ required by a bound in this function
...
  |     T: EDeserialize<'de>,
  |        ^^^^^^^^^^^^^^^^^ required by this bound in `maybe_invalid_or_missing`

error[E0599]: no function or associated item named `deserialize` found for struct `__ImplDeserializeForCoord` in the current scope
 --> tests/compile_fail/malformed_serde_deserialize_with.rs:3:10
  |
3 | #[derive(eserde::Deserialize)]
  |          ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `__ImplDeserializeForCoord`
4 | struct Coord {
  | ------------ function or associated item `deserialize` not found for this struct
  |
  = help: items from traits can only be used if the trait is implemented and in scope
  = note: the following traits define an item `deserialize`, perhaps you need to implement one of them:
          candidate #1: `Deserialize`
          candidate #2: `DeserializeSeed`
  = note: this error originates in the derive macro `eserde::Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)
